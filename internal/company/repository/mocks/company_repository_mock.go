// Code generated by MockGen. DO NOT EDIT.
// Source: internal/company/repository/interface.go
//
// Generated by this command:
//
//	mockgen -source=internal/company/repository/interface.go -destination=internal/company/repository/mocks/company_repository_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "km-api-go/internal/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCompanyRepository is a mock of CompanyRepository interface.
type MockCompanyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCompanyRepositoryMockRecorder
	isgomock struct{}
}

// MockCompanyRepositoryMockRecorder is the mock recorder for MockCompanyRepository.
type MockCompanyRepositoryMockRecorder struct {
	mock *MockCompanyRepository
}

// NewMockCompanyRepository creates a new mock instance.
func NewMockCompanyRepository(ctrl *gomock.Controller) *MockCompanyRepository {
	mock := &MockCompanyRepository{ctrl: ctrl}
	mock.recorder = &MockCompanyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompanyRepository) EXPECT() *MockCompanyRepositoryMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockCompanyRepository) Count() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockCompanyRepositoryMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockCompanyRepository)(nil).Count))
}

// Create mocks base method.
func (m *MockCompanyRepository) Create(company *domain.Company) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", company)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCompanyRepositoryMockRecorder) Create(company any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCompanyRepository)(nil).Create), company)
}

// Delete mocks base method.
func (m *MockCompanyRepository) Delete(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCompanyRepositoryMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCompanyRepository)(nil).Delete), id)
}

// Exists mocks base method.
func (m *MockCompanyRepository) Exists(id uint) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockCompanyRepositoryMockRecorder) Exists(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockCompanyRepository)(nil).Exists), id)
}

// ExistsByEmail mocks base method.
func (m *MockCompanyRepository) ExistsByEmail(email string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsByEmail", email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsByEmail indicates an expected call of ExistsByEmail.
func (mr *MockCompanyRepositoryMockRecorder) ExistsByEmail(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsByEmail", reflect.TypeOf((*MockCompanyRepository)(nil).ExistsByEmail), email)
}

// GetAll mocks base method.
func (m *MockCompanyRepository) GetAll() ([]domain.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]domain.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockCompanyRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockCompanyRepository)(nil).GetAll))
}

// GetByEmail mocks base method.
func (m *MockCompanyRepository) GetByEmail(email string) (*domain.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", email)
	ret0, _ := ret[0].(*domain.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockCompanyRepositoryMockRecorder) GetByEmail(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockCompanyRepository)(nil).GetByEmail), email)
}

// GetByID mocks base method.
func (m *MockCompanyRepository) GetByID(id uint) (*domain.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*domain.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockCompanyRepositoryMockRecorder) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockCompanyRepository)(nil).GetByID), id)
}

// GetPaginated mocks base method.
func (m *MockCompanyRepository) GetPaginated(offset, limit int) ([]domain.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaginated", offset, limit)
	ret0, _ := ret[0].([]domain.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaginated indicates an expected call of GetPaginated.
func (mr *MockCompanyRepositoryMockRecorder) GetPaginated(offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaginated", reflect.TypeOf((*MockCompanyRepository)(nil).GetPaginated), offset, limit)
}

// SearchByName mocks base method.
func (m *MockCompanyRepository) SearchByName(name string) ([]domain.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchByName", name)
	ret0, _ := ret[0].([]domain.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchByName indicates an expected call of SearchByName.
func (mr *MockCompanyRepositoryMockRecorder) SearchByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByName", reflect.TypeOf((*MockCompanyRepository)(nil).SearchByName), name)
}

// Update mocks base method.
func (m *MockCompanyRepository) Update(company *domain.Company) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", company)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCompanyRepositoryMockRecorder) Update(company any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCompanyRepository)(nil).Update), company)
}

// MockCompanyUserRepository is a mock of CompanyUserRepository interface.
type MockCompanyUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCompanyUserRepositoryMockRecorder
	isgomock struct{}
}

// MockCompanyUserRepositoryMockRecorder is the mock recorder for MockCompanyUserRepository.
type MockCompanyUserRepositoryMockRecorder struct {
	mock *MockCompanyUserRepository
}

// NewMockCompanyUserRepository creates a new mock instance.
func NewMockCompanyUserRepository(ctrl *gomock.Controller) *MockCompanyUserRepository {
	mock := &MockCompanyUserRepository{ctrl: ctrl}
	mock.recorder = &MockCompanyUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompanyUserRepository) EXPECT() *MockCompanyUserRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCompanyUserRepository) Create(companyUser *domain.CompanyUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", companyUser)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCompanyUserRepositoryMockRecorder) Create(companyUser any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCompanyUserRepository)(nil).Create), companyUser)
}

// Delete mocks base method.
func (m *MockCompanyUserRepository) Delete(userID, companyID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", userID, companyID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCompanyUserRepositoryMockRecorder) Delete(userID, companyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCompanyUserRepository)(nil).Delete), userID, companyID)
}

// Exists mocks base method.
func (m *MockCompanyUserRepository) Exists(userID, companyID uint) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", userID, companyID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockCompanyUserRepositoryMockRecorder) Exists(userID, companyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockCompanyUserRepository)(nil).Exists), userID, companyID)
}

// GetCompaniesByUserID mocks base method.
func (m *MockCompanyUserRepository) GetCompaniesByUserID(userID uint) ([]domain.CompanyUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompaniesByUserID", userID)
	ret0, _ := ret[0].([]domain.CompanyUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompaniesByUserID indicates an expected call of GetCompaniesByUserID.
func (mr *MockCompanyUserRepositoryMockRecorder) GetCompaniesByUserID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompaniesByUserID", reflect.TypeOf((*MockCompanyUserRepository)(nil).GetCompaniesByUserID), userID)
}

// GetRelation mocks base method.
func (m *MockCompanyUserRepository) GetRelation(userID, companyID uint) (*domain.CompanyUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelation", userID, companyID)
	ret0, _ := ret[0].(*domain.CompanyUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelation indicates an expected call of GetRelation.
func (mr *MockCompanyUserRepositoryMockRecorder) GetRelation(userID, companyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelation", reflect.TypeOf((*MockCompanyUserRepository)(nil).GetRelation), userID, companyID)
}

// GetUsersByCompanyID mocks base method.
func (m *MockCompanyUserRepository) GetUsersByCompanyID(companyID uint) ([]domain.CompanyUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersByCompanyID", companyID)
	ret0, _ := ret[0].([]domain.CompanyUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersByCompanyID indicates an expected call of GetUsersByCompanyID.
func (mr *MockCompanyUserRepositoryMockRecorder) GetUsersByCompanyID(companyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByCompanyID", reflect.TypeOf((*MockCompanyUserRepository)(nil).GetUsersByCompanyID), companyID)
}

// Update mocks base method.
func (m *MockCompanyUserRepository) Update(companyUser *domain.CompanyUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", companyUser)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCompanyUserRepositoryMockRecorder) Update(companyUser any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCompanyUserRepository)(nil).Update), companyUser)
}
